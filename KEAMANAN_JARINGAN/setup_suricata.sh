#!/bin/bash
# File: setup_suricata.sh

# Source common functions
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "${SCRIPT_DIR}/common_functions.sh"

echo "=== SURICATA AUTO INSTALLER & CONFIGURATOR ==="
echo "Setting up Suricata IDS..."

# Check sudo privileges
check_sudo

# Check internet connectivity
log_info "Checking internet connectivity..."
if ! test_connectivity; then
    log_error "No internet connection detected. Please check your network."
    exit 1
fi
log_success "Internet connectivity verified"

# Update system with progress
log_info "Updating system packages..."
if ! sudo apt update >/dev/null 2>&1; then
    log_error "Failed to update package list"
    exit 1
fi
log_success "Package list updated"

# Check and install dependencies for Suricata
log_info "Installing Suricata dependencies..."
DEPENDENCIES=(
    "suricata:Network Intrusion Detection System"
    "jq:JSON processor for log analysis"
    "ipcalc-ng:IP calculator"
)

for dep in "${DEPENDENCIES[@]}"; do
    package=$(echo "$dep" | cut -d: -f1)
    description=$(echo "$dep" | cut -d: -f2)
    if ! install_package "$package" "$description"; then
        log_error "Failed to install $package. Aborting installation."
        exit 1
    fi
done

# Detect network interface and local network
log_info "Configuring network settings..."
INTERFACE=$(detect_network_interface true)
LOCAL_NET=$(detect_local_network "$INTERFACE")

log_success "Network configuration completed:"
log_info "Interface: $INTERFACE"
log_info "Home Network: $LOCAL_NET"

# Create suricata user and group if they don't exist
if ! id "suricata" >/dev/null 2>&1; then
    log_info "Creating suricata user..."
    sudo useradd -r -s /bin/false suricata
    log_success "Suricata user created"
else
    log_info "Suricata user already exists"
fi

# Create necessary directories
create_directory "/var/log/suricata" "suricata" "suricata" "755"
create_directory "/etc/suricata/rules" "suricata" "suricata" "755"
create_directory "/var/lib/suricata" "suricata" "suricata" "755"

# Backup original config
backup_file "/etc/suricata/suricata.yaml"

# Configure Suricata with comprehensive configuration
log_info "Creating Suricata configuration..."
sudo tee /etc/suricata/suricata.yaml > /dev/null <<EOF
# Suricata Configuration File
# Generated by IDS Setup Script

vars:
  address-groups:
    HOME_NET: "[$LOCAL_NET]"
    EXTERNAL_NET: "![\$HOME_NET]"
    
    HTTP_SERVERS: "[\$HOME_NET]"
    SMTP_SERVERS: "[\$HOME_NET]"
    SQL_SERVERS: "[\$HOME_NET]"
    DNS_SERVERS: "[\$HOME_NET]"
    TELNET_SERVERS: "[\$HOME_NET]"
    AIM_SERVERS: "[\$EXTERNAL_NET]"
    DC_SERVERS: "[\$HOME_NET]"
    DNP3_SERVER: "[\$HOME_NET]"
    DNP3_CLIENT: "[\$HOME_NET]"
    MODBUS_CLIENT: "[\$HOME_NET]"
    MODBUS_SERVER: "[\$HOME_NET]"
    ENIP_CLIENT: "[\$HOME_NET]"
    ENIP_SERVER: "[\$HOME_NET]"
    
  port-groups:
    HTTP_PORTS: "80"
    SHELLCODE_PORTS: "!80"
    ORACLE_PORTS: 1521
    SSH_PORTS: 22
    DNP3_PORTS: 20000
    MODBUS_PORTS: 502
    FILE_DATA_PORTS: "[\$HTTP_PORTS,110,143]"
    FTP_PORTS: 21
    
default-log-dir: /var/log/suricata/

# Global stats configuration
stats:
  enabled: yes
  interval: 8

# Configure the type of alert (and other) logging you want.
outputs:
  # Fast log is a line based alerts log similar to Snort's fast.log
  - fast:
      enabled: yes
      filename: fast.log
      append: yes

  # Extensible Event Format (JSON) log
  - eve-log:
      enabled: yes
      filetype: regular
      filename: eve.json
      community-id: true
      community-id-seed: 0
      types:
        - alert:
            payload: yes
            payload-buffer-size: 4kb
            payload-printable: yes
            packet: yes
            metadata: yes
            http-body: yes
            http-body-printable: yes
            tagged-packets: yes
        - anomaly:
            enabled: yes
            types:
              decode: yes
              stream: yes
              applayer: yes
        - http:
            extended: yes
        - dns:
            query: yes
            answer: yes
        - tls:
            extended: yes
        - files:
            force-magic: no
        - smtp:
        - ftp
        - rdp
        - nfs
        - smb
        - tftp
        - ikev2
        - dcerpc
        - krb5
        - snmp
        - sip
        - dhcp:
            enabled: yes
            extended: no
        - ssh
        - stats:
            totals: yes
            threads: no
            deltas: no
        - flow

  # HTTP log
  - http-log:
      enabled: no
      filename: http.log
      append: yes

  # TLS log
  - tls-log:
      enabled: no
      filename: tls.log
      append: yes

  # DNS log
  - dns-log:
      enabled: no
      filename: dns.log
      append: yes

  # Packet log
  - pcap-log:
      enabled: no
      filename: log.pcap
      limit: 1000mb
      max-files: 2000
      compression: none
      mode: normal
      use-stream-depth: no
      honor-pass-rules: no

logging:
  default-log-level: notice
  default-log-format: "[%i] %t - (%f:%l) <%d> (%n) -- "
  default-output-filter:
  
  outputs:
  - console:
      enabled: yes
      type: json
  - file:
      enabled: yes
      level: info
      filename: /var/log/suricata/suricata.log
      type: json
  - syslog:
      enabled: no
      facility: local5
      format: "[%i] <%d> -- "
      type: json

# Network interface configuration
af-packet:
  - interface: $INTERFACE
    threads: auto
    defrag: yes
    cluster-type: cluster_flow
    cluster-id: 99
    copy-mode: ips
    copy-iface: eth1
    buffer-size: 64kb
    use-mmap: yes
    tpacket-v3: yes

# Flow timeouts
flow:
  memcap: 128mb
  hash-size: 65536
  prealloc: 10000
  emergency-recovery: 30
  managers: 1
  recyclers: 1

# Stream engine settings
stream:
  memcap: 64mb
  checksum-validation: yes
  inline: auto
  bypass: no
  reassembly:
    memcap: 256mb
    depth: 1mb
    toserver-chunk-size: 2560
    toclient-chunk-size: 2560
    randomize-chunk-size: yes

# Host table
host:
  hash-size: 4096
  prealloc: 1000
  memcap: 32mb

# IP Reputation
reputation-categories-file: /etc/suricata/iprep/categories.txt
default-reputation-path: /etc/suricata/iprep

# Rule files
rule-files:
  - /etc/suricata/rules/local.rules
  - /etc/suricata/rules/suricata.rules

# Classification file
classification-file: /etc/suricata/classification.config

# Reference file
reference-config-file: /etc/suricata/reference.config

# Threshold file
threshold-file: /etc/suricata/threshold.config

# Include other configs
include: /etc/suricata/enable.conf

# Advanced features
detect:
  profile: medium
  custom-values:
    toclient-groups: 3
    toserver-groups: 25
  sgh-mpm-context: auto
  inspection-recursion-limit: 3000
  prefilter:
    default: mpm

# Application layer configuration
app-layer:
  protocols:
    rfb:
      enabled: yes
      detection-ports:
        dp: 5900, 5901, 5902, 5903, 5904, 5905, 5906, 5907, 5908, 5909
    mqtt:
      enabled: yes
      detection-ports:
        dp: 1883
        sp: 1883
    krb5:
      enabled: yes
    snmp:
      enabled: yes
    ikev2:
      enabled: yes
    tls:
      enabled: yes
      detection-ports:
        dp: 443
      ja3-fingerprints: yes
      ja3s-fingerprints: yes
    dcerpc:
      enabled: yes
    ftp:
      enabled: yes
      memcap: 64mb
    rdp:
      enabled: yes
    ssh:
      enabled: yes
    http2:
      enabled: yes
    smtp:
      enabled: yes
      raw-extraction: no
      mime:
        decode-mime: yes
        decode-base64: yes
        decode-quoted-printable: yes
        header-value-depth: 2000
        extract-urls: yes
        body-md5: no
      inspected-tracker:
        content-limit: 100000
        content-inspect-min-size: 32768
        content-inspect-window: 4096
    imap:
      enabled: detection-only
    smb:
      enabled: yes
      detection-ports:
        dp: 139, 445
    nfs:
      enabled: yes
    tftp:
      enabled: yes
    dns:
      tcp:
        enabled: yes
        detection-ports:
          dp: 53
      udp:
        enabled: yes
        detection-ports:
          dp: 53
    http:
      enabled: yes
      libhtp:
         default-config:
           personality: IDS
           request-body-limit: 100kb
           response-body-limit: 100kb
           request-body-minimal-inspect-size: 32kb
           request-body-inspect-window: 4kb
           response-body-minimal-inspect-size: 40kb
           response-body-inspect-window: 16kb
           response-body-decompress-layer-limit: 2
           http-body-inline: auto
           swf-decompression:
             enabled: yes
             type: both
             compress-depth: 0
             decompress-depth: 0
           double-decode-path: no
           double-decode-query: no
           response-body-decompress-layer-limit: 2

# Performance and CPU affinity
threading:
  set-cpu-affinity: no
  cpu-affinity:
    - management-cpu-set:
        cpu: [ 0 ]
    - receive-cpu-set:
        cpu: [ 0 ]
    - worker-cpu-set:
        cpu: [ "all" ]
  detect-thread-ratio: 1.0

# Profiling
profiling:
  rules:
    enabled: yes
    filename: rule_perf.log
    append: yes
    sort: avgticks
    limit: 10
  keywords:
    enabled: yes
    filename: keyword_perf.log
    append: yes
  prefilter:
    enabled: yes
    filename: prefilter_perf.log
    append: yes
  rulegroups:
    enabled: yes
    filename: rule_group_perf.log
    append: yes
  packets:
    enabled: yes
    filename: packet_stats.log
    append: yes
    csv:
      enabled: no
      filename: packet_stats.csv
  locks:
    enabled: no
    filename: lock_stats.log
    append: yes
  pcap-log:
    enabled: no
    filename: pcaplog_stats.log
    append: yes

coredump:
  max-dump: unlimited

# Host OS policy
host-os-policy:
  windows: [0.0.0.0/0]
  bsd: []
  bsd-right: []
  old-linux: []
  linux: [10.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12]
  old-solaris: []
  solaris: []
  hpux10: []
  hpux11: []
  irix: []
  macos: []
  vista: []
  windows2k3: []

# Exception policy
exception-policy: auto
EOF

log_success "Suricata configuration file created"

# Create classification configuration
log_info "Creating classification configuration..."
sudo tee /etc/suricata/classification.config > /dev/null <<EOF
config classification: not-suspicious,Not Suspicious Traffic,3
config classification: unknown,Unknown Traffic,3
config classification: bad-unknown,Potentially Bad Traffic,2
config classification: attempted-recon,Attempted Information Leak,2
config classification: successful-recon-limited,Information Leak,2
config classification: successful-recon-largescale,Large Scale Information Leak,2
config classification: attempted-dos,Attempted Denial of Service,2
config classification: successful-dos,Denial of Service,2
config classification: attempted-user,Attempted User Privilege Gain,1
config classification: unsuccessful-user,Unsuccessful User Privilege Gain,1
config classification: successful-user,Successful User Privilege Gain,1
config classification: attempted-admin,Attempted Administrator Privilege Gain,1
config classification: successful-admin,Successful Administrator Privilege Gain,1
config classification: rpc-portmap-decode,Decode of RPC Query,2
config classification: shellcode-detect,Executable code was detected,1
config classification: string-detect,A suspicious string was detected,3
config classification: suspicious-filename-detect,A suspicious filename was detected,2
config classification: suspicious-login,An attempted login using a suspicious username was detected,2
config classification: system-call-detect,A system call was detected,2
config classification: tcp-connection,A TCP connection was detected,4
config classification: trojan-activity,A Network Trojan was detected,1
config classification: unusual-client-port-connection,A client was using an unusual port,2
config classification: network-scan,Detection of a Network Scan,3
config classification: denial-of-service,Detection of a Denial of Service Attack,2
config classification: non-standard-protocol,Detection of a non-standard protocol or event,2
config classification: protocol-command-decode,Generic Protocol Command Decode,3
config classification: web-application-activity,access to a potentially vulnerable web application,2
config classification: web-application-attack,Web Application Attack,1
config classification: misc-activity,Misc activity,3
config classification: misc-attack,Misc Attack,2
config classification: icmp-event,Generic ICMP event,3
config classification: inappropriate-content,Inappropriate Content was Detected,1
config classification: policy-violation,Potential Corporate Privacy Violation,1
config classification: default-login-attempt,Attempt to login by a default username and password,2
EOF

# Create reference configuration
log_info "Creating reference configuration..."
sudo tee /etc/suricata/reference.config > /dev/null <<EOF
config reference: arachNIDS,http://www.whitehats.com/info/IDS
config reference: bugtraq,http://www.securityfocus.com/bid/
config reference: cve,http://cve.mitre.org/cgi-bin/cvename.cgi?name=
config reference: nessus,http://cgi.nessus.org/plugins/dump.php3?id=
config reference: url,http://
config reference: mcafee,http://vil.nai.com/vil/content/v_
config reference: osvdb,http://osvdb.org/show/osvdb/
config reference: msb,http://www.microsoft.com/technet/security/bulletin/
config reference: cert,http://www.cert.org/advisories/
config reference: securiteam,http://www.securiteam.com/securityreviews/
EOF

# Create threshold configuration
log_info "Creating threshold configuration..."
sudo tee /etc/suricata/threshold.config > /dev/null <<EOF
# Threshold configuration for Suricata
# Configure event frequency limits

# Example threshold configurations
# threshold gen_id 1, sig_id 2000001, type limit, track by_src, count 1, seconds 60
# threshold gen_id 1, sig_id 2000002, type both, track by_src, count 5, seconds 60

# Suppress noisy false positives
# suppress gen_id 1, sig_id 2000003, track by_src, ip 192.168.1.100
EOF

# Create enable configuration
log_info "Creating enable configuration..."
sudo tee /etc/suricata/enable.conf > /dev/null <<EOF
# Additional configuration files can be included here
# include: additional.yaml
EOF

# Create enhanced custom rules
log_info "Creating custom detection rules..."
sudo tee /etc/suricata/rules/local.rules > /dev/null <<EOF
# Suricata Local Rules
# Custom rules for advanced network security monitoring

# Port Scan Detection
alert tcp any any -> \$HOME_NET any (msg:"SCAN: TCP Port Scan Detected"; flags:S,12; threshold:type both, track by_src, count 5, seconds 60; classtype:attempted-recon; sid:2000001; rev:1;)
alert tcp any any -> \$HOME_NET any (msg:"SCAN: SYN Flood Attack"; flags:S; threshold:type both, track by_src, count 15, seconds 10; classtype:attempted-dos; sid:2000002; rev:1;)
alert tcp any any -> \$HOME_NET any (msg:"SCAN: TCP Connect Scan"; flags:S; threshold:type both, track by_src, count 10, seconds 30; classtype:attempted-recon; sid:2000003; rev:1;)

# SSH Attack Detection
alert tcp any any -> \$HOME_NET 22 (msg:"SSH: Brute Force Attack Detected"; flags:S; threshold:type both, track by_src, count 5, seconds 60; classtype:attempted-admin; sid:2000004; rev:1;)
alert tcp any any -> \$HOME_NET 22 (msg:"SSH: Multiple Failed Login Attempts"; content:"Failed password"; threshold:type both, track by_src, count 3, seconds 30; classtype:unsuccessful-user; sid:2000005; rev:1;)
alert tcp any any -> \$HOME_NET 22 (msg:"SSH: Root Login Attempt"; content:"root"; pcre:"/root/i"; classtype:suspicious-login; sid:2000006; rev:1;)

# Web Application Attacks
alert tcp any any -> \$HOME_NET any (msg:"WEB: SQL Injection Attempt"; content:"union"; nocase; content:"select"; nocase; distance:0; within:100; classtype:web-application-attack; sid:2000007; rev:1;)
alert tcp any any -> \$HOME_NET any (msg:"WEB: XSS Attack Detected"; content:"<script"; nocase; classtype:web-application-attack; sid:2000008; rev:1;)
alert tcp any any -> \$HOME_NET any (msg:"WEB: Directory Traversal Attack"; content:"../"; classtype:web-application-attack; sid:2000009; rev:1;)
alert tcp any any -> \$HOME_NET any (msg:"WEB: Command Injection Attempt"; pcre:"/(\||;|&|`|\$\()/"; classtype:web-application-attack; sid:2000010; rev:1;)
alert tcp any any -> \$HOME_NET any (msg:"WEB: File Upload Attack"; content:"Content-Type:"; nocase; content:"multipart/form-data"; nocase; classtype:web-application-attack; sid:2000011; rev:1;)

# Network Protocol Attacks
alert icmp any any -> \$HOME_NET any (msg:"ICMP: Flood Attack Detected"; threshold:type both, track by_src, count 10, seconds 5; classtype:attempted-dos; sid:2000012; rev:1;)
alert icmp any any -> \$HOME_NET any (msg:"ICMP: Ping of Death Attack"; dsize:>1000; classtype:attempted-dos; sid:2000013; rev:1;)
alert icmp any any -> \$HOME_NET any (msg:"ICMP: Suspicious Large Packet"; dsize:>500; threshold:type both, track by_src, count 5, seconds 30; classtype:attempted-dos; sid:2000014; rev:1;)

# DNS Security
alert udp any any -> \$HOME_NET 53 (msg:"DNS: Possible DNS Tunneling Detected"; dsize:>512; classtype:suspicious-filename-detect; sid:2000015; rev:1;)
alert udp any any -> \$HOME_NET 53 (msg:"DNS: Suspicious Query Length"; dsize:>100; threshold:type both, track by_src, count 10, seconds 60; classtype:attempted-recon; sid:2000016; rev:1;)
alert tcp any any -> \$HOME_NET 53 (msg:"DNS: TCP Query (Possible Exfiltration)"; classtype:suspicious-filename-detect; sid:2000017; rev:1;)

# FTP Security
alert tcp any any -> \$HOME_NET 21 (msg:"FTP: Anonymous Login Attempt"; content:"USER anonymous"; nocase; classtype:suspicious-login; sid:2000018; rev:1;)
alert tcp any any -> \$HOME_NET 21 (msg:"FTP: Brute Force Attack"; content:"530"; threshold:type both, track by_src, count 5, seconds 60; classtype:unsuccessful-user; sid:2000019; rev:1;)
alert tcp any any -> \$HOME_NET 21 (msg:"FTP: Administrative Login Attempt"; content:"USER admin"; nocase; classtype:suspicious-login; sid:2000020; rev:1;)

# Email Security
alert tcp any any -> \$HOME_NET 25 (msg:"SMTP: Open Relay Test"; content:"MAIL FROM:"; content:"RCPT TO:"; classtype:policy-violation; sid:2000021; rev:1;)
alert tcp any any -> \$HOME_NET 110 (msg:"POP3: Brute Force Attack"; content:"-ERR"; threshold:type both, track by_src, count 5, seconds 60; classtype:unsuccessful-user; sid:2000022; rev:1;)

# Suspicious Network Activity
alert tcp any any -> \$HOME_NET any (msg:"TROJAN: Possible Backdoor Communication"; flags:A+; flow:established; threshold:type both, track by_src, count 1, seconds 3600; classtype:trojan-activity; sid:2000023; rev:1;)
alert tcp any any -> \$HOME_NET any (msg:"SCAN: Stealth Scan (FIN)"; flags:F; classtype:attempted-recon; sid:2000024; rev:1;)
alert tcp any any -> \$HOME_NET any (msg:"SCAN: NULL Scan Detected"; flags:0; classtype:attempted-recon; sid:2000025; rev:1;)
alert tcp any any -> \$HOME_NET any (msg:"SCAN: XMAS Scan Detected"; flags:FPU; classtype:attempted-recon; sid:2000026; rev:1;)

# P2P and File Sharing
alert tcp any any -> \$HOME_NET any (msg:"P2P: BitTorrent Traffic Detected"; content:"BitTorrent"; nocase; classtype:policy-violation; sid:2000027; rev:1;)
alert tcp any any -> \$HOME_NET any (msg:"P2P: eMule Traffic Detected"; content:"eMule"; nocase; classtype:policy-violation; sid:2000028; rev:1;)

# Malware Communication
alert tcp any any -> \$HOME_NET any (msg:"MALWARE: Suspicious User-Agent"; content:"User-Agent:"; nocase; content:"Bot"; nocase; classtype:trojan-activity; sid:2000029; rev:1;)
alert tcp any any -> \$HOME_NET any (msg:"MALWARE: Suspicious HTTP Request"; content:"GET"; content:"/"; content:".exe"; classtype:trojan-activity; sid:2000030; rev:1;)

# Network Reconnaissance
alert tcp any any -> \$HOME_NET any (msg:"RECON: OS Fingerprinting Attempt"; flags:S; window:1024; classtype:attempted-recon; sid:2000031; rev:1;)
alert tcp any any -> \$HOME_NET any (msg:"RECON: Banner Grabbing Attempt"; content:"HEAD"; http_method; classtype:attempted-recon; sid:2000032; rev:1;)

# VPN and Tunneling
alert tcp any any -> \$HOME_NET any (msg:"VPN: Suspicious VPN Traffic"; content:"OpenVPN"; nocase; classtype:policy-violation; sid:2000033; rev:1;)
alert udp any any -> \$HOME_NET 1194 (msg:"VPN: OpenVPN Connection"; classtype:policy-violation; sid:2000034; rev:1;)

# Database Attacks
alert tcp any any -> \$HOME_NET 1433 (msg:"DB: SQL Server Login Attempt"; classtype:attempted-admin; sid:2000035; rev:1;)
alert tcp any any -> \$HOME_NET 3306 (msg:"DB: MySQL Brute Force"; threshold:type both, track by_src, count 5, seconds 60; classtype:attempted-admin; sid:2000036; rev:1;)
alert tcp any any -> \$HOME_NET 5432 (msg:"DB: PostgreSQL Login Attempt"; classtype:attempted-admin; sid:2000037; rev:1;)
EOF

# Create empty suricata.rules file if it doesn't exist
if [[ ! -f "/etc/suricata/rules/suricata.rules" ]]; then
    sudo touch /etc/suricata/rules/suricata.rules
    sudo chown suricata:suricata /etc/suricata/rules/suricata.rules
fi

# Set proper permissions
sudo chown -R suricata:suricata /etc/suricata/
sudo chown -R suricata:suricata /var/log/suricata/
sudo chown -R suricata:suricata /var/lib/suricata/

# Create startup script
log_info "Creating Suricata startup script..."
sudo tee /usr/local/bin/start_suricata.sh > /dev/null <<EOF
#!/bin/bash
# Suricata startup script with error handling

SURICATA_CONFIG="/etc/suricata/suricata.yaml"
SURICATA_LOG_DIR="/var/log/suricata"
INTERFACE="$INTERFACE"

# Check if Suricata is already running
if pgrep suricata >/dev/null 2>&1; then
    echo "Suricata is already running (PID: \$(pgrep suricata))"
    exit 1
fi

# Test configuration before starting
echo "Testing Suricata configuration..."
if ! /usr/bin/suricata -T -c "\$SURICATA_CONFIG" >/dev/null 2>&1; then
    echo "ERROR: Suricata configuration test failed!"
    echo "Run 'sudo suricata -T -c \$SURICATA_CONFIG' to see details"
    exit 1
fi

echo "Configuration test passed. Starting Suricata..."
echo "Interface: \$INTERFACE"
echo "Config: \$SURICATA_CONFIG"
echo "Logs: \$SURICATA_LOG_DIR"

# Start Suricata
/usr/bin/suricata -c "\$SURICATA_CONFIG" -i "\$INTERFACE" -D

if [[ \$? -eq 0 ]]; then
    sleep 2
    if pgrep suricata >/dev/null 2>&1; then
        echo "Suricata started successfully!"
        echo "PID: \$(pgrep suricata)"
    else
        echo "Suricata may have failed to start properly"
        exit 1
    fi
else
    echo "Failed to start Suricata!"
    exit 1
fi
EOF

sudo chmod +x /usr/local/bin/start_suricata.sh

# Test Suricata configuration
log_info "Testing Suricata configuration..."
if sudo suricata -T -c /etc/suricata/suricata.yaml >/dev/null 2>&1; then
    log_success "Suricata configuration test passed!"
else
    log_warning "Suricata configuration test failed. You may need to adjust the configuration."
    log_info "Run 'sudo suricata -T -c /etc/suricata/suricata.yaml' to see details"
fi

echo
log_success "✅ Suricata installation and configuration completed!"
echo "=========================================="
log_info "Configuration Summary:"
echo "  Interface: $INTERFACE"
echo "  Home Network: $LOCAL_NET"
echo "  Config File: /etc/suricata/suricata.yaml"
echo "  Rules Directory: /etc/suricata/rules"
echo "  Log Directory: /var/log/suricata"
echo "  Startup Script: /usr/local/bin/start_suricata.sh"
echo
log_info "To start Suricata:"
echo "  sudo /usr/local/bin/start_suricata.sh"
echo
log_info "To start Suricata manually:"
echo "  sudo suricata -c /etc/suricata/suricata.yaml -i $INTERFACE"
echo
log_info "To test configuration:"
echo "  sudo suricata -T -c /etc/suricata/suricata.yaml"
echo
log_info "Use 'suricata_control.sh' for advanced management options."