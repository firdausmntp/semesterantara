#!/bin/bash
# File: setup_snort.sh

# Source common functions
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "${SCRIPT_DIR}/common_functions.sh"

echo "=== SNORT AUTO INSTALLER & CONFIGURATOR ==="
echo "Setting up Snort IDS..."

# Check sudo privileges
check_sudo

# Check internet connectivity
log_info "Checking internet connectivity..."
if ! test_connectivity; then
    log_error "No internet connection detected. Please check your network."
    exit 1
fi
log_success "Internet connectivity verified"

# Update system with progress
log_info "Updating system packages..."
if ! sudo apt update >/dev/null 2>&1; then
    log_error "Failed to update package list"
    exit 1
fi
log_success "Package list updated"

# Check and install dependencies
log_info "Installing dependencies..."
DEPENDENCIES=(
    "build-essential:Development tools"
    "libpcap-dev:Packet capture library"
    "libpcre3-dev:Perl Compatible Regular Expressions"
    "libdumbnet-dev:Simple packet creation library"
    "bison:Parser generator"
    "flex:Fast lexical analyzer"
    "zlib1g-dev:Compression library"
    "liblzma-dev:LZMA compression library"
    "openssl:SSL/TLS toolkit"
    "libssl-dev:SSL development libraries"
    "ipcalc-ng:IP calculator"
)

for dep in "${DEPENDENCIES[@]}"; do
    package=$(echo "$dep" | cut -d: -f1)
    description=$(echo "$dep" | cut -d: -f2)
    if ! install_package "$package" "$description"; then
        log_error "Failed to install $package. Aborting installation."
        exit 1
    fi
done

# Install Snort
log_info "Installing Snort IDS..."
if ! install_package "snort" "Network Intrusion Detection System"; then
    log_error "Failed to install Snort. Aborting."
    exit 1
fi

# Detect network interface and local network
log_info "Configuring network settings..."
INTERFACE=$(detect_network_interface true)
LOCAL_NET=$(detect_local_network "$INTERFACE")

log_success "Network configuration completed:"
log_info "Interface: $INTERFACE"
log_info "Home Network: $LOCAL_NET"

# Create snort user and group if they don't exist
if ! id "snort" >/dev/null 2>&1; then
    log_info "Creating snort user..."
    sudo useradd -r -s /bin/false snort
    log_success "Snort user created"
else
    log_info "Snort user already exists"
fi

# Create necessary directories
create_directory "/var/log/snort" "snort" "snort" "755"
create_directory "/etc/snort/rules" "snort" "snort" "755"
create_directory "/etc/snort/so_rules" "snort" "snort" "755"
create_directory "/etc/snort/preproc_rules" "snort" "snort" "755"
create_directory "/usr/local/lib/snort_dynamicrules" "snort" "snort" "755"

# Backup original config
backup_file "/etc/snort/snort.conf"

# Configure Snort with comprehensive configuration
log_info "Creating Snort configuration..."
sudo tee /etc/snort/snort.conf > /dev/null <<EOF
#--------------------------------------------------
# Snort Configuration File
# Generated by IDS Setup Script
#--------------------------------------------------

#--------------------------------------------------
# Network Variables
#--------------------------------------------------
var HOME_NET $LOCAL_NET
var EXTERNAL_NET !\$HOME_NET

var DNS_SERVERS \$HOME_NET
var SMTP_SERVERS \$HOME_NET
var HTTP_SERVERS \$HOME_NET
var SQL_SERVERS \$HOME_NET
var TELNET_SERVERS \$HOME_NET
var SSH_SERVERS \$HOME_NET
var FTP_SERVERS \$HOME_NET

#--------------------------------------------------
# Port Variables
#--------------------------------------------------
var HTTP_PORTS [80,81,311,383,591,593,631,901,1220,1414,1741,1830,2301,2381,2809,3037,3128,3702,4343,4848,5250,6988,7000,7001,7144,7145,7510,7777,7779,8000,8008,8014,8028,8080,8085,8088,8090,8118,8123,8180,8243,8280,8300,8800,8888,8899,9000,9060,9080,9090,9091,9443,9999,11371,34443,34444,41080,50002,55555]
var SHELLCODE_PORTS !80
var ORACLE_PORTS 1024:
var SSH_PORTS 22
var FTP_PORTS 21
var SIP_PORTS [5060,5061,5600]
var FILE_DATA_PORTS [\$HTTP_PORTS,110,143]
var GTP_PORTS [2123,2152,3386]

#--------------------------------------------------
# Path Variables
#--------------------------------------------------
var RULE_PATH /etc/snort/rules
var SO_RULE_PATH /etc/snort/so_rules
var PREPROC_RULE_PATH /etc/snort/preproc_rules

var WHITE_LIST_PATH /etc/snort/rules
var BLACK_LIST_PATH /etc/snort/rules

#--------------------------------------------------
# Configure the snort decoder
#--------------------------------------------------
config checksum_mode: all
config disable_decode_alerts
config disable_tcpopt_experimental_alerts
config disable_tcpopt_obsolete_alerts
config disable_ttcp_alerts
config disable_tcpopt_alerts
config disable_ipopt_alerts
config disable_decode_drops

#--------------------------------------------------
# Configure the detection engine
#--------------------------------------------------
config detection: search-method ac-split search-optimize max-pattern-len 20
config event_queue: max_queue 8 log 5 order_events content_length

#--------------------------------------------------
# Configure preprocessors
#--------------------------------------------------

# Stream5 preprocessor
preprocessor stream5_global: track_tcp yes, track_udp yes, track_icmp no, max_tcp 262144, max_udp 131072, max_active_responses 2, min_response_seconds 5
preprocessor stream5_tcp: policy windows, detect_anomalies, require_3whs 180, overlap_limit 10, small_segments 3 bytes 150, timeout 180, ports client 21 22 23 25 42 53 79 109 110 111 113 119 135 136 137 139 143 161 445 513 514 587 593 691 1433 1521 2100 3306 6665 6666 6667 6668 6669 32770 32771 32772 32773 32774 32775 32776 32777 32778 32779, ports both 80 81 311 383 443 465 563 591 593 631 636 901 989 992 993 994 995 1220 1414 1741 1830 2301 2381 2809 3037 3128 3702 4343 4848 5250 6988 7000 7001 7144 7145 7510 7777 7779 8000 8008 8014 8028 8080 8085 8088 8090 8118 8123 8180 8243 8280 8300 8800 8888 8899 9000 9060 9080 9090 9091 9443 9999 11371 34443 34444 41080 50002 55555
preprocessor stream5_udp: timeout 180

# HTTP Inspect
preprocessor http_inspect: global iis_unicode_map unicode.map 1252 compress_depth 65535 decompress_depth 65535
preprocessor http_inspect_server: server default \\
    http_methods { GET POST PUT SEARCH MKCOL COPY MOVE LOCK UNLOCK NOTIFY POLL BCOPY BDELETE BMOVE LINK UNLINK OPTIONS HEAD DELETE TRACE TRACK CONNECT SOURCE SUBSCRIBE UNSUBSCRIBE PROPFIND PROPPATCH BPROPFIND BPROPPATCH RPC_CONNECT PROXY_SUCCESS BITS_POST CCM_POST SMS_POST RPC_IN_DATA RPC_OUT_DATA RPC_ECHO_DATA } \\
    chunk_length 500000 \\
    server_flow_depth 0 \\
    client_flow_depth 0 \\
    post_depth 65495 \\
    oversize_dir_length 500 \\
    max_header_length 750 \\
    max_headers 100 \\
    max_spaces 200 \\
    small_chunk_length { 10 5 } \\
    ports { 80 81 311 383 591 593 631 901 1220 1414 1741 1830 2301 2381 2809 3037 3128 3702 4343 4848 5250 6988 7000 7001 7144 7145 7510 7777 7779 8000 8008 8014 8028 8080 8085 8088 8090 8118 8123 8180 8243 8280 8300 8800 8888 8899 9000 9060 9080 9090 9091 9443 9999 11371 34443 34444 41080 50002 55555 } \\
    non_rfc_char { 0x00 0x01 0x02 0x03 0x04 0x05 0x06 0x07 } \\
    enable_cookie \\
    extended_response_inspection \\
    inspect_gzip \\
    normalize_utf \\
    unlimited_decompress \\
    normalize_javascript \\
    apache_whitespace no \\
    ascii no \\
    bare_byte no \\
    base36 no \\
    double_decode no \\
    iis_backslash no \\
    iis_delimiter no \\
    iis_unicode no \\
    multi_slash no \\
    utf_8 no \\
    u_encode yes \\
    webroot no

# RPC Decode
preprocessor rpc_decode: 111 32770 32771 32772 32773 32774 32775 32776 32777 32778 32779 no_alert_multiple_requests no_alert_large_fragments no_alert_incomplete

# Performance Monitor
preprocessor perfmonitor: time 300 file /var/log/snort/snort.stats pktcnt 10000

# Port scan detection
preprocessor sfportscan: proto  { all } memcap { 10000000 } sense_level { low }

#--------------------------------------------------
# Output Modules
#--------------------------------------------------
output alert_fast: /var/log/snort/alert
output log_tcpdump: /var/log/snort/snort.log

#--------------------------------------------------
# Configure Active Response
#--------------------------------------------------
config response: device eth0

#--------------------------------------------------
# Configure Thresholding and Suppression
#--------------------------------------------------
include /etc/snort/threshold.conf

#--------------------------------------------------
# Include classification & reference config
#--------------------------------------------------
include /etc/snort/classification.config
include /etc/snort/reference.config

#--------------------------------------------------
# Include rule files
#--------------------------------------------------
include \$RULE_PATH/local.rules
include \$RULE_PATH/community.rules

# Uncomment these lines to enable additional rule sets
# include \$RULE_PATH/snort.rules
# include \$RULE_PATH/web-attacks.rules
# include \$RULE_PATH/backdoor.rules
# include \$RULE_PATH/shellcode.rules
# include \$RULE_PATH/policy.rules
# include \$RULE_PATH/porn.rules
# include \$RULE_PATH/info.rules
# include \$RULE_PATH/icmp-info.rules
# include \$RULE_PATH/virus.rules
# include \$RULE_PATH/chat.rules
# include \$RULE_PATH/multimedia.rules
# include \$RULE_PATH/p2p.rules

# Include any local additions
include \$RULE_PATH/local-additions.rules
EOF

log_success "Snort configuration file created"

# Create threshold configuration
log_info "Creating threshold configuration..."
sudo tee /etc/snort/threshold.conf > /dev/null <<EOF
# Threshold configuration for Snort
# Suppress noisy rules and configure event thresholds

# Example suppressions (uncomment and modify as needed)
# suppress gen_id 1, sig_id 1000001
# threshold gen_id 1, sig_id 1000001, type limit, track by_src, count 1, seconds 60
EOF

# Create classification configuration
log_info "Creating classification configuration..."
sudo tee /etc/snort/classification.config > /dev/null <<EOF
# Classification configuration for Snort
config classification: not-suspicious,Not Suspicious Traffic,3
config classification: unknown,Unknown Traffic,3
config classification: bad-unknown,Potentially Bad Traffic, 2
config classification: attempted-recon,Attempted Information Leak,2
config classification: successful-recon-limited,Information Leak,2
config classification: successful-recon-largescale,Large Scale Information Leak,2
config classification: attempted-dos,Attempted Denial of Service,2
config classification: successful-dos,Denial of Service,2
config classification: attempted-user,Attempted User Privilege Gain,1
config classification: unsuccessful-user,Unsuccessful User Privilege Gain,1
config classification: successful-user,Successful User Privilege Gain,1
config classification: attempted-admin,Attempted Administrator Privilege Gain,1
config classification: successful-admin,Successful Administrator Privilege Gain,1
config classification: rpc-portmap-decode,Decode of RPC Query,2
config classification: shellcode-detect,Executable code was detected,1
config classification: string-detect,A suspicious string was detected,3
config classification: suspicious-filename-detect,A suspicious filename was detected,2
config classification: suspicious-login,An attempted login using a suspicious username was detected,2
config classification: system-call-detect,A system call was detected,2
config classification: tcp-connection,A TCP connection was detected,4
config classification: trojan-activity,A Network Trojan was detected, 1
config classification: unusual-client-port-connection,A client was using an unusual port,2
config classification: network-scan,Detection of a Network Scan,3
config classification: denial-of-service,Detection of a Denial of Service Attack,2
config classification: non-standard-protocol,Detection of a non-standard protocol or event,2
config classification: protocol-command-decode,Generic Protocol Command Decode,3
config classification: web-application-activity,access to a potentially vulnerable web application,2
config classification: web-application-attack,Web Application Attack,1
config classification: misc-activity,Misc activity,3
config classification: misc-attack,Misc Attack,2
config classification: icmp-event,Generic ICMP event,3
config classification: inappropriate-content,Inappropriate Content was Detected,1
config classification: policy-violation,Potential Corporate Privacy Violation,1
config classification: default-login-attempt,Attempt to login by a default username and password,2
EOF

# Create reference configuration
log_info "Creating reference configuration..."
sudo tee /etc/snort/reference.config > /dev/null <<EOF
# Reference configuration for Snort
config reference: arachNIDS,http://www.whitehats.com/info/IDS
config reference: bugtraq,http://www.securityfocus.com/bid/
config reference: cve,http://cve.mitre.org/cgi-bin/cvename.cgi?name=
config reference: nessus,http://cgi.nessus.org/plugins/dump.php3?id=
config reference: url,http://
config reference: mcafee,http://vil.nai.com/vil/content/v_
EOF

# Create custom rules with enhanced detection
log_info "Creating custom detection rules..."
sudo tee /etc/snort/rules/local.rules > /dev/null <<EOF
# Local Snort Rules
# Custom rules for network security monitoring

# Port Scan Detection
alert tcp any any -> \$HOME_NET any (msg:"SCAN: Possible TCP Port Scan"; flags:S,12; threshold:type both, track by_src, count 5, seconds 60; classtype:attempted-recon; sid:1000001; rev:1;)
alert tcp any any -> \$HOME_NET any (msg:"SCAN: Possible SYN Flood"; flags:S; threshold:type both, track by_src, count 10, seconds 10; classtype:attempted-dos; sid:1000002; rev:1;)

# SSH Attack Detection
alert tcp any any -> \$HOME_NET 22 (msg:"SSH: Brute Force Attack Detected"; flags:S; threshold:type both, track by_src, count 5, seconds 60; classtype:attempted-admin; sid:1000003; rev:1;)
alert tcp any any -> \$HOME_NET 22 (msg:"SSH: Multiple Failed Logins"; content:"Failed password"; threshold:type both, track by_src, count 3, seconds 30; classtype:unsuccessful-user; sid:1000004; rev:1;)

# Web Attack Detection
alert tcp any any -> \$HOME_NET \$HTTP_PORTS (msg:"WEB: SQL Injection Attempt"; content:"union"; nocase; content:"select"; nocase; classtype:web-application-attack; sid:1000005; rev:1;)
alert tcp any any -> \$HOME_NET \$HTTP_PORTS (msg:"WEB: XSS Attempt Detected"; content:"<script"; nocase; classtype:web-application-attack; sid:1000006; rev:1;)
alert tcp any any -> \$HOME_NET \$HTTP_PORTS (msg:"WEB: Directory Traversal Attempt"; content:"../"; classtype:web-application-attack; sid:1000007; rev:1;)

# ICMP Attack Detection
alert icmp any any -> \$HOME_NET any (msg:"ICMP: Flood Attack Detected"; threshold:type both, track by_src, count 10, seconds 5; classtype:attempted-dos; sid:1000008; rev:1;)
alert icmp any any -> \$HOME_NET any (msg:"ICMP: Ping of Death"; dsize:>1000; classtype:attempted-dos; sid:1000009; rev:1;)

# DNS Attack Detection
alert udp any any -> \$HOME_NET 53 (msg:"DNS: Possible DNS Tunneling"; dsize:>512; classtype:suspicious-filename-detect; sid:1000010; rev:1;)

# FTP Attack Detection
alert tcp any any -> \$HOME_NET 21 (msg:"FTP: Anonymous Login Attempt"; content:"USER anonymous"; nocase; classtype:suspicious-login; sid:1000011; rev:1;)
alert tcp any any -> \$HOME_NET 21 (msg:"FTP: Brute Force Attack"; content:"530 "; threshold:type both, track by_src, count 5, seconds 60; classtype:unsuccessful-user; sid:1000012; rev:1;)

# Telnet Attack Detection
alert tcp any any -> \$HOME_NET 23 (msg:"TELNET: Login Attempt"; content:"login:"; nocase; classtype:suspicious-login; sid:1000013; rev:1;)

# Suspicious Network Activity
alert tcp any any -> \$HOME_NET any (msg:"TROJAN: Possible Backdoor Communication"; flags:A+; threshold:type both, track by_src, count 1, seconds 3600; classtype:trojan-activity; sid:1000014; rev:1;)
alert tcp any any -> \$HOME_NET any (msg:"SCAN: Stealth Scan Detected"; flags:F; classtype:attempted-recon; sid:1000015; rev:1;)
alert tcp any any -> \$HOME_NET any (msg:"SCAN: NULL Scan Detected"; flags:0; classtype:attempted-recon; sid:1000016; rev:1;)

# P2P Detection
alert tcp any any -> \$HOME_NET any (msg:"P2P: BitTorrent Traffic Detected"; content:"BitTorrent"; nocase; classtype:policy-violation; sid:1000017; rev:1;)
EOF

# Create empty local-additions.rules file
sudo touch /etc/snort/rules/local-additions.rules
sudo chown snort:snort /etc/snort/rules/local-additions.rules

# Create empty community.rules file if it doesn't exist
if [[ ! -f "/etc/snort/rules/community.rules" ]]; then
    sudo touch /etc/snort/rules/community.rules
    sudo chown snort:snort /etc/snort/rules/community.rules
fi

# Set proper permissions
sudo chown -R snort:snort /etc/snort/
sudo chown -R snort:snort /var/log/snort/

# Create startup script with proper error handling
log_info "Creating Snort startup script..."
sudo tee /usr/local/bin/start_snort.sh > /dev/null <<EOF
#!/bin/bash
# Snort startup script with error handling

SNORT_CONFIG="/etc/snort/snort.conf"
SNORT_LOG_DIR="/var/log/snort"
SNORT_PID_FILE="/var/run/snort.pid"
INTERFACE="$INTERFACE"

# Check if Snort is already running
if [[ -f "\$SNORT_PID_FILE" ]]; then
    PID=\$(cat "\$SNORT_PID_FILE")
    if ps -p "\$PID" >/dev/null 2>&1; then
        echo "Snort is already running (PID: \$PID)"
        exit 1
    else
        echo "Removing stale PID file..."
        rm -f "\$SNORT_PID_FILE"
    fi
fi

# Test configuration before starting
echo "Testing Snort configuration..."
if ! /usr/bin/snort -T -c "\$SNORT_CONFIG" >/dev/null 2>&1; then
    echo "ERROR: Snort configuration test failed!"
    echo "Run 'sudo snort -T -c \$SNORT_CONFIG' to see details"
    exit 1
fi

echo "Configuration test passed. Starting Snort..."
echo "Interface: \$INTERFACE"
echo "Config: \$SNORT_CONFIG"
echo "Logs: \$SNORT_LOG_DIR"

# Start Snort
/usr/bin/snort -A fast -b -d -D -i "\$INTERFACE" -u snort -g snort -c "\$SNORT_CONFIG" -l "\$SNORT_LOG_DIR" --pid-path /var/run --create-pidfile

if [[ \$? -eq 0 ]]; then
    echo "Snort started successfully!"
    sleep 2
    if [[ -f "\$SNORT_PID_FILE" ]]; then
        echo "PID: \$(cat \$SNORT_PID_FILE)"
    fi
else
    echo "Failed to start Snort!"
    exit 1
fi
EOF

sudo chmod +x /usr/local/bin/start_snort.sh

# Test Snort configuration
log_info "Testing Snort configuration..."
if sudo snort -T -c /etc/snort/snort.conf >/dev/null 2>&1; then
    log_success "Snort configuration test passed!"
else
    log_warning "Snort configuration test failed. You may need to adjust the configuration."
    log_info "Run 'sudo snort -T -c /etc/snort/snort.conf' to see details"
fi

echo
log_success "✅ Snort installation and configuration completed!"
echo "========================================"
log_info "Configuration Summary:"
echo "  Interface: $INTERFACE"
echo "  Home Network: $LOCAL_NET"
echo "  Config File: /etc/snort/snort.conf"
echo "  Rules Directory: /etc/snort/rules"
echo "  Log Directory: /var/log/snort"
echo "  Startup Script: /usr/local/bin/start_snort.sh"
echo
log_info "To start Snort:"
echo "  sudo /usr/local/bin/start_snort.sh"
echo
log_info "To start Snort manually:"
echo "  sudo snort -A fast -b -d -i $INTERFACE -c /etc/snort/snort.conf -l /var/log/snort"
echo
log_info "To test configuration:"
echo "  sudo snort -T -c /etc/snort/snort.conf"
echo
log_info "Use 'snort_control.sh' for advanced management options."